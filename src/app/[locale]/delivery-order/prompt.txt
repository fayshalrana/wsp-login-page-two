Prompt for Cursor AI Code Editor:

"Create a React-based delivery order interface with the following components and functionality. Ensure the design and functionality match the attached image reference. Use modern React practices, Tailwind CSS for styling, and ensure the components are reusable and well-structured.

1. Table for Items (QTY, Price, Total Price, Discount):
Use an array of objects to represent the items and map through them to render the table.

Columns: QTY, Price, Total Price, Discount.

Discount Column:

Add a plus button with a rounded-full border (size: h-32px, w-32px).

On click, the button should add a discount number (like the last one) and show an edit icon.

The edit icon should allow editing the discount value.

2. Order Header Component (@order-header.tsx):
Create two buttons: Edit Order and Cancel Order.

Use a shared Button component with the following styles:

Default: bg-transparent, text-black, border-black, border-width: 1px.

On Hover: bg-black, text-white.

Ensure the buttons match the design in the attached image.

3. Order Details Component (@order-details.tsx):
Add icons for each section as shown in the attached image.

Use text-black/60 for text color to achieve 60% opacity.

Add a Paid Tag next to the order number box, styled as in the image.

4. Order Summary Component (@order-summary.tsx):
Fix the Subtotal Box to match the attached image.

Place the Discount Button below the Grand Total.

Add a Print Icon Button and Pay Bill Button horizontally aligned.

Include an hr line below the buttons.

Add Kitchen and Bar icons on their respective buttons, styled as in the image.

5. General Requirements:
Use Tailwind CSS for all styling.

Ensure the layout is responsive and matches the attached image.

Use reusable components where possible (e.g., Button, Icon, Tag).

Add appropriate hover and click effects for interactivity.

6. Code Structure:
Use functional components and React hooks (e.g., useState for managing discount values).

Organize the code into separate files:

@order-header.tsx

@order-details.tsx

@order-summary.tsx

Use TypeScript for type safety if applicable.

7. Expected Output:
A fully functional delivery order interface with interactive buttons, icons, and a responsive layout.

The table should dynamically update discounts when the plus button is clicked.

All buttons and icons should match the design in the attached image.